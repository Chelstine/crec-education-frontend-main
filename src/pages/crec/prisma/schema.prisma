// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== AUTHENTICATION ====================
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts      Account[]
  sessions      Session[]
  enrollments   Enrollment[]
  reservations  Reservation[]
  contentItems  ContentItem[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

// ==================== CONTENT MANAGEMENT ====================
model ContentItem {
  id        String   @id @default(cuid())
  key       String   @unique
  title     String?
  content   String   @db.Text
  type      ContentType @default(TEXT)
  language  String   @default("fr")
  published Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  authorId  String?  @map("author_id")

  author User? @relation(fields: [authorId], references: [id])

  @@map("content_items")
}

enum ContentType {
  TEXT
  HTML
  MARKDOWN
  IMAGE
  VIDEO
}

// ==================== FORMATIONS ====================
model Formation {
  id          String      @id @default(cuid())
  title       String
  description String      @db.Text
  type        FormationType
  category    String?
  duration    String?
  price       Float?
  capacity    Int?
  image       String?
  status      FormationStatus @default(DRAFT)
  startDate   DateTime?   @map("start_date")
  endDate     DateTime?   @map("end_date")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  enrollments Enrollment[]

  @@map("formations")
}

enum FormationType {
  UNIVERSITY
  OPEN
  FABLAB
}

enum FormationStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Enrollment {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  formationId String   @map("formation_id")
  status      EnrollmentStatus @default(PENDING)
  enrolledAt  DateTime @default(now()) @map("enrolled_at")
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  formation Formation @relation(fields: [formationId], references: [id], onDelete: Cascade)

  @@unique([userId, formationId])
  @@map("enrollments")
}

enum EnrollmentStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

// ==================== FABLAB ====================
model Machine {
  id          String    @id @default(cuid())
  name        String
  description String?   @db.Text
  type        String
  status      MachineStatus @default(AVAILABLE)
  image       String?
  pricePerHour Float?   @map("price_per_hour")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  reservations Reservation[]

  @@map("machines")
}

enum MachineStatus {
  AVAILABLE
  MAINTENANCE
  OUT_OF_ORDER
}

model Reservation {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  machineId String    @map("machine_id")
  startTime DateTime  @map("start_time")
  endTime   DateTime  @map("end_time")
  status    ReservationStatus @default(PENDING)
  notes     String?
  createdAt DateTime  @default(now()) @map("created_at")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  machine Machine @relation(fields: [machineId], references: [id], onDelete: Cascade)

  @@map("reservations")
}

enum ReservationStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

// ==================== EVENTS & NEWS ====================
model Event {
  id          String    @id @default(cuid())
  title       String
  description String    @db.Text
  content     String?   @db.Text
  startDate   DateTime  @map("start_date")
  endDate     DateTime? @map("end_date")
  location    String?
  image       String?
  published   Boolean   @default(false)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("events")
}

model NewsArticle {
  id        String   @id @default(cuid())
  title     String
  excerpt   String?
  content   String   @db.Text
  image     String?
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("news_articles")
}

// ==================== PARTNERS ====================
model Partner {
  id          String  @id @default(cuid())
  name        String
  description String? @db.Text
  logo        String?
  website     String?
  active      Boolean @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("partners")
}
